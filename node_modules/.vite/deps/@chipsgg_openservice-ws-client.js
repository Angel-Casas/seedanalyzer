import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-OROXOI2D.js";

// browser-external:assert
var assert_exports = {};
__export(assert_exports, {
  default: () => assert_default
});
var assert_default;
var init_assert = __esm({
  "browser-external:assert"() {
    assert_default = new Proxy({}, {
      get() {
        throw new Error('Module "assert" has been externalized for browser compatibility and cannot be accessed in client code.');
      }
    });
  }
});

// node_modules/@chipsgg/openservice-ws-client/dist/index.js
var require_dist = __commonJS({
  "node_modules/@chipsgg/openservice-ws-client/dist/index.js"(exports, module) {
    function e(e2) {
      return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var n = e((init_assert(), __toCommonJS(assert_exports)));
    var t = { decode: function(e2) {
      return JSON.parse(e2);
    }, encode: function(e2) {
      return JSON.stringify(e2);
    }, isEvent: function(e2) {
      return null == e2[1];
    }, isRpc: function(e2) {
      return null != e2[1];
    } };
    var r = t.touch = function(e2 = {}, n2 = [], t2 = (e3) => e3, o2 = 0) {
      if (0 == n2.length)
        return data;
      if (o2 == n2.length - 1)
        return t2(e2, n2[o2]), e2;
      const s2 = n2[o2];
      return e2[s2] = { ...e2[s2] }, r(e2[s2], n2, t2, o2 + 1), e2;
    };
    t.set = function(e2, n2, t2) {
      return r(e2, n2, (e3, n3) => e3[n3] = t2);
    };
    var o = t.unset = function(e2 = {}, n2 = [], t2 = (e3, n3) => delete e3[n3], r2 = 0) {
      if (0 == n2.length)
        return data;
      if (r2 == n2.length - 1)
        return t2(e2, n2[r2]), e2;
      const s2 = n2[r2];
      return null == e2[s2] || (e2[s2] = { ...e2[s2] }, o(e2[s2], n2, t2, r2 + 1)), e2;
    };
    var { set: s, unset: c } = t;
    var { encode: u } = t;
    var a = n.default;
    var i = (e2 = {}) => (n2, [t2 = [], r2]) => (t2.length ? e2[n2] = null == r2 ? c({ ...e2[n2] }, t2) : s({ ...e2[n2] }, t2, r2) : e2[n2] = r2, e2[n2]);
    var l = n.default;
    var f = (e2, n2, t2 = (e3) => e3) => async () => {
      const r2 = new e2(n2);
      return await new Promise((e3, n3) => {
        r2.onopen = (n4) => {
          r2.readyState === r2.OPEN && (t2("open", n4), e3());
        }, r2.onerror = (e4) => n3(e4), r2.onclose = (e4) => n3(e4);
      }), r2.onmessage = (e3) => t2("message", e3.data), r2.onerror = (e3) => t2("error", e3), r2.onclose = (e3) => t2("close", e3), r2.onopen = (e3) => {
        r2.readyState === r2.OPEN && t2("open", e3);
      }, r2;
    };
    var d = (e2) => {
      const n2 = /* @__PURE__ */ new Map();
      let t2 = 0;
      return { call: function(e3, r2) {
        return (o2, ...s2) => new Promise((c2, a2) => {
          n2.set(++t2, [c2, a2]);
          try {
            e3().send(u([r2, t2, o2, s2]));
          } catch (e4) {
            a2(e4);
          }
        });
      }, response: function(e3) {
        const [t3, r2, o2, s2] = e3;
        if (!n2.has(r2))
          return;
        const [c2, u2] = n2.get(r2);
        if (s2) {
          const [e4, n3] = s2, t4 = new Error(e4);
          t4.stack = n3, u2(t4);
        } else
          c2(o2);
        n2.delete(r2);
      }, pending: n2 };
    };
    var p = ({ keepalive: e2 = 3e4 }, { ws: n2, connect: t2 }, r2 = (e3) => e3) => {
      let o2;
      async function s2() {
        n2.readyState, n2.OPEN, n2.readyState === n2.CLOSED && await t2().then((e3) => {
          r2("reconnect", n2 = e3);
        }).catch((e3) => {
        }), o2 = setTimeout(s2, e2);
      }
      return a(e2, "requires keepalive value in ms"), { pause: () => clearTimeout(o2), resume() {
        if (!o2)
          return s2();
      } };
    };
    var { decode: h, isEvent: g, isRpc: m } = t;
    var y = async (e2, n2 = {}, t2 = (e3) => e3, r2 = {}) => {
      const { host: o2, channels: s2 = [] } = n2;
      l(o2, "requires host"), l(s2, "requires channels");
      const c2 = d(), u2 = i(r2);
      const a2 = f(e2, o2, (e3, n3) => {
        "message" == e3 ? function(e4, n4) {
          const o3 = h(n4);
          let s3 = false;
          o3.forEach((e5) => {
            g(e5) ? (s3 = true, u2(e5[0], e5[2])) : m(e5) && c2.response(e5);
          }), s3 && t2("change", r2);
        }(0, n3) : t2(e3, n3);
      });
      let y2 = await a2();
      function w2() {
        return y2;
      }
      const v = p(n2, { ws: y2, connect: a2 }, (e3, n3) => {
        y2 = n3, t2(e3, y2);
      });
      v.resume();
      return s2.reduce((e3, n3) => (e3.actions[n3] = c2.call(w2, n3), e3), { actions: {}, rpc: c2, getWs: w2, setState: u2, ...v, connect: a2, close: function() {
        v.pause(), y2.close();
      } });
    };
    var w = y;
    exports.default = w, module.exports = exports.default;
  }
});

// dep:@chipsgg_openservice-ws-client
var chipsgg_openservice_ws_client_default = require_dist();
export {
  chipsgg_openservice_ws_client_default as default
};
//# sourceMappingURL=@chipsgg_openservice-ws-client.js.map
